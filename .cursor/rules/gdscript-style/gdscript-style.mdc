---
title: GDScript & Godot 4 Best Practices
description: Leia esta regra quando for escrever, revisar ou padronizar scripts em GDScript para o projeto Godot 4. Use-a ao criar novos scripts, revisar nomes, estrutura, comentários, uso de sinais, exportações, ou ao garantir aderência às melhores práticas de codificação Godot.
alwaysApply: false
---

# GDScript & Godot 4 Best Practices

- Use snake_case for variable and function names.
- Use PascalCase for class names.
- Each script should define a single class or component.
- Prefer composition (nodes/scenes) over inheritance when possible.
- Use Godot's signal system for decoupled communication between nodes.
- Use `@export` for editor-exposed variables.
- Use `@onready` for node references that require the scene tree.
- Keep scripts focused and under 200 lines when possible.
- Document complex functions with comments.
- Use Godot's built-in types (Vector2, Color, etc.) for clarity and performance.
- Avoid hardcoding resource paths; use `preload()` or `load()`.
- Use `_ready()` for initialization, `_process(delta)` for per-frame logic, and `_physics_process(delta)` for physics.
- Prefer signals over polling for event-driven logic.
- Use groups for managing collections of nodes (e.g., all enemies).

## Example
```gdscript
extends Node2D

@export var speed: float = 200.0
@onready var sprite: Sprite2D = $Sprite2D

func _ready():
    print("Node ready!")

func _process(delta):
    position.x += speed * delta
```
